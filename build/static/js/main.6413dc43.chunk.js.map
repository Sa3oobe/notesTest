{"version":3,"sources":["services/notes.js","components/note.js","components/Notification.js","App.js","index.js"],"names":["services_notes","axios","get","then","response","data","newObject","post","id","put","concat","delete","Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","type","window","confirm","notes","setTimeout","location","reload","Notification","message","Footer","style","color","fontStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","console","log","noteServices","initialNotes","length","notesToShow","filter","components_Notification","map","components_note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","date","Date","toISOString","Math","random","value","onChange","App_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6413dc43.chunk.js","sourcesContent":["/* The module returns an object that has three functions (getAll, create, and update) as its properties that deal with notes.\r\n The functions directly return the promises returned by the axios methods. */\r\nimport axios from \"axios\";\r\n\r\nconst baseUrl = '/api/notes' // relative URL\r\n\r\n\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst del = (id)=> {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n/* export default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update\r\n} */\r\n/* Since the names of the keys and the assigned variables are the same in the exported object above,\r\n we can write the object definition with a more compact syntax: */\r\n\r\n export default { \r\n    getAll, \r\n    create, \r\n    update,\r\n    del\r\n  }","import React from 'react'\r\nimport notes from '../services/notes.js'\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important \r\n  ? 'make not important'\r\n  : 'make important'\r\n  return(\r\n    <li className='note'>\r\n        {note.content}\r\n        <button onClick={toggleImportance}>{label}</button>\r\n        {<button type=\"button\" onClick={() => {\r\n                window.confirm('Are you sure?')\r\n                notes.del(note.id)\r\n                //setTimeout to give time for the promise to finish.. didnt need to do that with chrome and brave, only with firefox\r\n                setTimeout(() => {window.location.reload()}, 500)\r\n                \r\n              }\r\n              \r\n                }>\r\n                delete</button>}\r\n    </li>\r\n  )\r\n  }\r\n\r\n  export default Note\r\n","import React from \"react\";\r\n\r\nconst Notification = ({message}) => {\r\n    if(message === null){\r\n        return null\r\n    }\r\n    return(\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","//import axios from 'axios';\nimport React, {useState,useEffect}  from 'react';\nimport Note from './components/note';\nimport noteServices from './services/notes'\nimport Notification from './components/Notification';\n\n//import express from 'express'\n//import cors from 'cors'\n\n//const app = express()\n\n//app.use(cors())\n/*The Effect Hook lets you perform side effects on function components.\n  Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects.*/\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return(\n    <div style={footerStyle}>\n      <br />\n      <em>Note App by Department of Computer Science, University of Helsinki 2022</em>\n    </div>\n  )\n}\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('No errors so far')\n\nconst hook = () =>{\n  console.log('effect');\n  noteServices\n    .getAll()\n    .then(initialNotes => {\n      console.log('Promise fulfilled');\n      setNotes(initialNotes)\n  })\n}  \nuseEffect(hook,[])\n/*same thing as above.\nuseEffect(() => {\n  console.log('effect')\n  axios\n    .get('http://localhost:3001/notes')\n    .then(response => {\n      console.log('promise fulfilled')\n      setNotes(response.data)\n    })\n}, [])\n*/\n\n\nconsole.log('render', notes.length, 'notes');\n\n  const addNote = (event) => {\n    event.preventDefault()\n    console.log('button clicked, ', event.target)\n    const noteObject = {\n      content: newNote,\n      date:new Date().toISOString(),\n      important:Math.random() < 0.5,\n      //id: notes.length + 1, //omit the id property, it's better to let the server generate ids for our resources!\n      }\n    noteServices\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n\n      /* setNotes(notes.concat(noteObject))\n      setNewNote('') */\n  }\n\n  /* Individual notes stored in json-server backend can be modified in two different ways \n  by making HTTP requests to the note's unique URL. We can either replace the entire note with an HTTP PUT request,\n  or only change some of the note's properties with an HTTP PATCH request. */\n  const toggleImportanceOf = (id) => {\n    console.log(`importance of ${id} needs to be toggled`);\n    //find the note we want to modify, then assign it to the (note) variable.\n    const note = notes.find(n => n.id === id)\n    //new object that is an exact copy of the old note, apart from the important property.\n    const changedNote = { ...note, important: !note.important }\n    noteServices.update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(n => n.id !== id ? n : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note ${note.content} was already removed from the server`\n      )\n      setTimeout(() =>{\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value)\n  }\n  // view only the important notes.\n  const notesToShow = showAll ?\n    notes :\n    notes.filter(note => note.important === true)\n\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note key={note.id}  note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n          <input value={newNote} onChange={handleNoteChange}/>\n          <button type=\"submit\">Save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n/* import express from 'express'\nimport cors from 'cors'\n\nconst app = express()\n\napp.use(cors()) */\n\n//import createRoot from 'react-dom/client'\n//import axios from 'axios'\n/* A Promise is an object representing the eventual completion or failure of an asynchronous operation.\n\nIn other words, a promise is an object that represents an asynchronous operation. A promise can have three distinct states:\n\n1.The promise is pending: It means that the final value (one of the following two) is not available yet.\n2.The promise is fulfilled: It means that the operation has been completed and the final value is available, which generally is a successful operation. This state is sometimes also called resolved.\n3.The promise is rejected: It means that an error prevented the final value from being determined, which generally represents a failed operation. */\n//fetching has been removed. Since we're gonna be retrieving the notes from the server, there is no longer a need to pass data as props to the App component.\n/* const promise = axios\n  .get('http://localhost:3001/notes')\n  .then(response =>{\n    const notes = response.data\n    console.log(notes);\n  })\n\nconsole.log(promise);\n\nconst promise2 = axios.get('http://localhost:3001/foobar')\nconsole.log(promise2); */\n\n/* const notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n] */\n\nReactDOM.render(<App />,document.getElementById('root'))\n//ReactDOM.createRoot(document.getElementById('root')).render(<App/>)"],"sourceRoot":""}